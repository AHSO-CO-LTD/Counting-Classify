<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Ch·ªçn v√† C·∫Øt ·∫¢nh v·ªõi OpenCV</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
    <script
      async
      src="https://cdn.jsdelivr.net/npm/opencv.js"
      onload="cvReady()"
    ></script>

    <script>
      function cvReady() {
        console.log("üîπ OpenCV ƒëang t·∫£i...");
        let checkInterval = setInterval(() => {
          if (typeof cv !== "undefined" && cv.getBuildInformation) {
            console.log("‚úÖ OpenCV ƒë√£ s·∫µn s√†ng!");
            clearInterval(checkInterval);
          }
        }, 100);
      }
    </script>

    <style>
      body {
        font-family: Arial, sans-serif;
        text-align: center;
      }
      .container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 100px;
        margin-top: 20px;
      }
      #canvas {
        border: 2px solid black;
        height: 150px;
      }
      #canvasOutput {
        border: 2px solid black;
        /* transform-origin: center;  */
        height: 150px;
      }
      #controls {
        margin-top: 10px;
      }
    </style>
  </head>
  <body>
    <h2>üñº Ch·ªçn ·∫£nh v√† ƒëi·ªÅu ch·ªânh v√πng c·∫Øt</h2>
    <input type="file" id="imageInput" accept="image/*" />

    <div id="controls">
      <button onclick="addShape('rect')">üî≤ Ch·ªØ nh·∫≠t</button>
      <button onclick="addShape('circle')">‚ö´ Tr√≤n</button>
      <button onclick="addShape('triangle')">üî∫ Tam gi√°c</button>
      <button onclick="cropImage()">‚úÇ C·∫Øt ·∫£nh</button>
    </div>

    <div class="container">
      <canvas id="canvas"></canvas>
      <canvas id="canvasOutput"></canvas>
    </div>

    <script>
      let canvas = new fabric.Canvas("canvas");
      let uploadedImage;

      document
        .getElementById("imageInput")
        .addEventListener("change", function (event) {
          let file = event.target.files[0];
          let reader = new FileReader();
          reader.onload = function (e) {
            fabric.Image.fromURL(e.target.result, function (image) {
              uploadedImage = image;
              canvas.clear();
              let maxWidth = 500;
              imageScale = maxWidth / image.width;
              console.log("Image Scale: ", imageScale);

              image.scale(imageScale);
              canvas.setWidth(image.width * imageScale);
              canvas.setHeight(image.height * imageScale);
              canvas.add(image);
              canvas.renderAll();
              image.selectable = false;
            });
          };
          reader.readAsDataURL(file);
        });

      function addShape(type) {
        let shape;
        switch (type) {
          case "rect":
            shape = new fabric.Rect({
              left: 50,
              top: 50,
              width: 100,
              height: 100,
              fill: "transparent",
              stroke: "red",
              strokeWidth: 2,
              selectable: true,
            });
            break;
          case "circle":
            shape = new fabric.Circle({
              left: 50,
              top: 50,
              radius: 50,
              fill: "transparent",
              stroke: "red",
              strokeWidth: 2,
              selectable: true,
            });
            break;
          case "triangle":
            shape = new fabric.Triangle({
              left: 50,
              top: 50,
              width: 100,
              height: 100,
              fill: "transparent",
              stroke: "red",
              strokeWidth: 2,
              selectable: true,
            });
            break;
        }
        canvas.add(shape);
      }
      // =========================================================================================================================================

      function cropImage() {
        if (!uploadedImage) {
          alert("Ch∆∞a c√≥ ·∫£nh ƒë·ªÉ c·∫Øt!");
          return;
        }

        if (typeof cv === "undefined" || !cv.imread) {
          alert("OpenCV ch∆∞a s·∫µn s√†ng! Vui l√≤ng th·ª≠ l·∫°i sau.");
          return;
        }

        let activeObj = canvas.getActiveObject();
        if (!activeObj) {
          alert("Vui l√≤ng ch·ªçn m·ªôt v√πng c·∫ßn c·∫Øt!");
          return;
        }

        // L·∫•y g√≥c xoay c·ªßa khung c·∫Øt
        let angle = activeObj.angle;
        console.log("Angle: ", angle);

        // T√≠nh to√°n t·ªça ƒë·ªô v√† k√≠ch th∆∞·ªõc v√πng c·∫Øt trong kh√¥ng gian ban ƒë·∫ßu c·ªßa ·∫£nh
        let cropX = Math.round(activeObj.left / imageScale);
        let cropY = Math.round(activeObj.top / imageScale);
        let cropWidth = Math.round(activeObj.getScaledWidth() / imageScale);
        let cropHeight = Math.round(activeObj.getScaledHeight() / imageScale);

        if (cropWidth <= 0 || cropHeight <= 0) {
          alert("V√πng c·∫Øt kh√¥ng h·ª£p l·ªá!");
          return;
        }

        // ƒê·ªçc ·∫£nh g·ªëc t·ª´ DOM
        let imgElement = uploadedImage.getElement();
        let src = cv.imread(imgElement);

        // T√≠nh to√°n v√πng c·∫Øt (ƒë·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n ·∫£nh)
        cropX = Math.max(0, Math.min(cropX, src.cols - 1));
        cropY = Math.max(0, Math.min(cropY, src.rows - 1));
        cropWidth = Math.min(cropWidth, src.cols - cropX);
        cropHeight = Math.min(cropHeight, src.rows - cropY);

        // T·∫°o m·ªôt ma tr·∫≠n xoay ƒë·ªÉ t√≠nh to√°n v√πng c·∫Øt
        let center = new cv.Point(
          cropX + cropWidth / 2,
          cropY + cropHeight / 2
        );

        // T·∫°o ma tr·∫≠n xoay (gi·ªØ g√≥c c·ªßa khung)
        let rotationMatrix = cv.getRotationMatrix2D(center, angle, 1.0);

        // T·∫°o m·ªôt h√¨nh ·∫£nh t·∫°m th·ªùi ƒë·ªÉ √°p d·ª•ng ph√©p xoay ng∆∞·ª£c
        let rotatedImage = new cv.Mat();
        console.log("Rotated Image: ", rotatedImage);
        cv.warpAffine(
          src,
          rotatedImage,
          rotationMatrix,
          new cv.Size(src.cols, src.rows)
        );

        // C·∫Øt ·∫£nh t·ª´ h√¨nh ·∫£nh ƒë√£ xoay ng∆∞·ª£c
        let rect = new cv.Rect(cropX, cropY, cropWidth, cropHeight);
        let dst = rotatedImage.roi(rect);

        // Hi·ªÉn th·ªã k·∫øt qu·∫£ l√™n canvasOutput
        let canvasOutputElement = document.getElementById("canvasOutput");
        canvasOutputElement.width = cropWidth;
        canvasOutputElement.height = cropHeight;

        // Hi·ªÉn th·ªã ·∫£nh ƒë√£ c·∫Øt
        cv.imshow("canvasOutput", dst);
        canvasOutputElement.style.transform = `rotate(${angle}deg)`;
        // Gi·∫£i ph√≥ng b·ªô nh·ªõ
        src.delete();
        rotatedImage.delete();
        dst.delete();
        rotationMatrix.delete();
      }
    </script>
  </body>
</html>

